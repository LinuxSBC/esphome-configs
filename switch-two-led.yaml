# https://esphome.io/guides/configuration-types.html#substitutions
substitutions:
  # GPIO definitions
  sub_button_pin:   GPIO13
  sub_red_led_pin:  GPIO4
  sub_blue_led_pin: GPIO5
  sub_relay_pin:    GPIO12

packages:
  switch_base: github://LinuxSBC/esphome-configs/switch.yaml

# https://esphome.io/components/switch/index.html
switch:
    # https://esphome.io/components/switch/template.html
  - platform: template
    id: red_led
    name: Red LED
    optimistic: true
    entity_category: config
    disabled_by_default: $disable_entities
    icon: mdi:led-outline
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - lambda: id(red_led_pwm).set_level(id(red_led_brightness).state/100);
    on_turn_off:
      - lambda: id(red_led_pwm).set_level(0.0);

  - platform: template
    id: blue_led
    name: Blue LED
    optimistic: true
    entity_category: config
    disabled_by_default: $disable_entities
    icon: mdi:led-outline
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - lambda: id(blue_led_pwm).set_level(id(blue_led_brightness).state/100);
    on_turn_off:
      - lambda: id(blue_led_pwm).set_level(0.0);


# https://esphome.io/components/select/index.html
# https://esphome.io/components/select/template.html
select:
  - platform: template
    name: Red LED Config
    id: select_red_led
    optimistic: true
    entity_category: config
    options:
      - Power Status
      - No Automation
      - Invert Power Status
      - Error Status
      - Error and Power
      - Error and Invert Power
    initial_option: No Automation
    restore_value: true
    icon: mdi:led-on
    set_action:
      - script.execute: script_save_changes
    on_value:
      - if:
          condition:
            - lambda: return ( x == "Error Status" );
          then:
            - switch.turn_off: red_led
      - script.execute: script_set_power_leds

  - platform: template
    name: Blue LED Config
    id: select_blue_led
    optimistic: true
    entity_category: config
    options:
      - Power Status
      - No Automation
      - Invert Power Status
      - Error Status
      - Error and Power
      - Error and Invert Power
    initial_option: Power Status
    restore_value: true
    icon: mdi:led-on
    set_action:
      - script.execute: script_save_changes
    on_value:
      - if:
          condition:
            - lambda: return ( x == "Error Status" );
          then:
            - switch.turn_off: blue_led
      - script.execute: script_set_power_leds


# pwm outputs for LEDs so they can be dimmed
  - platform: esp8266_pwm
    id: red_led_pwm
    frequency: 200 Hz
    pin: $sub_red_led_pin
    inverted: true
  - platform: esp8266_pwm
    id: blue_led_pwm
    frequency: 200 Hz
    pin: $sub_blue_led_pin
    inverted: true


# https://esphome.io/guides/automations.html#script-component
script:

    # sets LEDs to proper state based on LED configuration and relay state
  - id: script_set_power_leds
    then:
      - lambda: |-
          // if red led follows power status
          if ( (id(select_red_led).state == "Power Status") || (id(select_red_led).state == "Error and Power") ) {
            id(red_led).publish_state(id(relay).state); }

          // if red led follows inverse of power status
          else if ( (id(select_red_led).state == "Invert Power Status") || (id(select_red_led).state == "Error and Invert Power") ) {
            id(red_led).publish_state(!id(relay).state); }

          // if blue led follows power status
          if ( (id(select_blue_led).state == "Power Status") || (id(select_blue_led).state == "Error and Power") ) {
            id(blue_led).publish_state(id(relay).state); }

          // if blue led follows inverse of power status
          else if ( (id(select_blue_led).state == "Invert Power Status") || (id(select_blue_led).state == "Error and Invert Power") ) {
            id(blue_led).publish_state(!id(relay).state); }

      - script.execute: script_save_changes

  - id: blink_status_led
    mode: queued
    then:

      - lambda: |-
          // turn on blue LED if configured for error status
          if ( (id(select_blue_led).state == "Error Status")  ||
               (id(select_blue_led).state == "Error and Power") ||
               (id(select_blue_led).state == "Error and Invert Power") ) {
            id(blue_led).turn_on(); }

          // turn on red LED if configured for error status
          if ( (id(select_red_led).state == "Error Status")  ||
               (id(select_red_led).state == "Error and Power") ||
               (id(select_red_led).state == "Error and Invert Power") ) {
            id(red_led).turn_on(); }
      - delay: 350ms

      - lambda: |-
          // turn off blue LED if configured for error status
          if ( (id(select_blue_led).state == "Error Status")  ||
               (id(select_blue_led).state == "Error and Power") ||
               (id(select_blue_led).state == "Error and Invert Power") ) {
            id(blue_led).turn_off(); }

          // turn off red LED if configured for error status
          if ( (id(select_red_led).state == "Error Status")  ||
               (id(select_red_led).state == "Error and Power") ||
               (id(select_red_led).state == "Error and Invert Power") ) {
            id(red_led).turn_off(); }
      - delay: 1150ms

      - if:
          condition:
            - lambda: return ( ( (App.get_app_state() & STATUS_LED_ERROR) != 0u) || ((App.get_app_state() & STATUS_LED_WARNING) != 0u) );
          then:
            - script.execute: blink_status_led # repeat as long as error/warning exists
          else:
            - script.execute: script_set_power_leds # done with status LED, restore light power status

    # blink LED forever.  Used when button is held to re-enable AP.  Stops blinking because plug restarts.
  - id: blink_led
    mode: queued
    then:
      - switch.toggle: blue_led
      - delay: 333ms
      - script.execute: blink_led

# https://esphome.io/components/number/index.html
# https://esphome.io/components/number/template.html
number:
  - platform: template
    name: Red LED Brightness
    min_value: 1
    max_value: 100
    step: 1
    initial_value: 75
    id: red_led_brightness
    entity_category: config
    optimistic: true
    restore_value: true
    unit_of_measurement: "%"
    mode: slider
    icon: mdi:brightness-percent
    set_action:
      - script.execute: script_save_changes
    on_value:
      - lambda: if ( id(red_led).state ) id(red_led_pwm).set_level(x/100);

  - platform: template
    name: Blue LED Brightness
    min_value: 1
    max_value: 100
    step: 1
    initial_value: 75
    id: blue_led_brightness
    entity_category: config
    optimistic: true
    restore_value: true
    unit_of_measurement: "%"
    mode: slider
    icon: mdi:brightness-percent
    set_action:
      - script.execute: script_save_changes
    on_value:
      - lambda: if ( id(blue_led).state ) id(blue_led_pwm).set_level(x/100);


# emulate status_led
# https://esphome.io/guides/automations.html#interval-component
interval:
  - interval: 5s
    then:
    - lambda: |-
        if ( ( ((App.get_app_state() & STATUS_LED_ERROR  ) != 0u) ||
               ((App.get_app_state() & STATUS_LED_WARNING) != 0u) )
            && !id(blink_status_led).is_running() )
          id(blink_status_led).execute();
