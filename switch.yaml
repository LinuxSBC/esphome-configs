# https://esphome.io/guides/configuration-types.html#substitutions
substitutions:
  name: switch                            # **** CHANGE DEVICE NAME TO SOMETHING UNIQUE PER DEVICE.  RENAME YAML FILE TO SAME NAME.    ****
                                          # **** USE DASHES (-) INSTEAD OF SPACES OR UNDERSCORE (_).  USE ONLY LOWER CASE LETTERS.     ****
  friendly_name: Light switch             # **** CHANGE FRIENDLY NAME TO SOMETHING UNIQUE PER DEVICE                                   ****

  # https://esphome.io/components/switch/gpio.html?highlight=restore_mode
  sub_restore_mode: RESTORE_DEFAULT_ON  # overwrite to change boot up behavior of relay

  disable_entities: "true"     # set to "false" to have all entities show up in Home Assistant automatically
  disable_webserver: "false"   # set to "true" to disable the webserver listening on port 80.

  wifi_ap_timeout: 2min        # default to 2 minute timeout for yaml file as package.
  sub_wifi_ssid: !secret wifi_ssid
  sub_wifi_password: !secret wifi_password

  # substitutions for scripts to execute based on button actions.
  # the built-in automations for the button will still do everything they normally do even
  # when these substitutions are redefined.  Redefining these will not stop the ui switch from toggling.
  # The button configuration select entity must be set to disabled to stop the button from toggling the ui switch.
  # The button press duration sensor will also still update even with these redefined.
  # any length of hold can be implemented with just on_press and on_release using the following directions.  This
  # is basically how this yaml file works.
  #   * have a delay for the desired hold in the on_press script
  #   * stop the on_press script in the on_release script
  #   * place actions in the on_press script after the delay to perform them while still holding the button
  #   * place actions in the on_release script, with the condition that the on_press script is not running, to
  #     perform them on release of the button.
  sub_on_press:                script_do_nothing # executes right when button is pressed
  sub_on_release:              script_do_nothing # executes right when button is released
  sub_on_triple_press:         script_do_nothing # executes when the button is triple pressed
  sub_on_double_press:         script_do_nothing # executes when the button is double pressed
  sub_on_single_press:         script_do_nothing # executes when the button is single pressed only, not held or double pressed
  sub_on_hold:                 script_do_nothing # executes when the button is held for a threshold amount of time
  sub_on_release_without_hold: script_do_nothing # executes when the button is released after a press that is under the hold threshold.
  sub_wifi_reset_script:       script_wifi_reset # reset wifi credentials, overwrite to disable

  # an extra script that, if running, will stop the relay from toggling on button release.
  # used to not toggle when WiFi AP is re-enabled on update bin file.
  sub_toggle_check: script_wifi_reset

  # these will execute when ui_switch turns on and off, respectively.  like on_press and on_release above, built-in
  # automations still all run.  Lights changing can be disabled through the config light entity effects.  Relay
  # can be disabled by selecting always on or always off in the configuration select entity.  You can control the
  # relay independently by toggling the select entity between always on and always off.
  sub_on_turn_on:  script_do_nothing
  sub_on_turn_off: script_do_nothing

  # made this a substitution so that the update bin file and yaml compiled versions can have different defaults
  default_button_config: "Toggle on Press"

  # GPIO definitions
  sub_button_pin:   GPIO0
  sub_led_pin:      GPIO13
  sub_relay_pin:    GPIO12

  # button press substitutions
  sub_double_press_max_gap: 333ms
  sub_hold_time: 750ms
  sub_button_sensor_duration: 500ms

  # substitutions to control hass entities with press combos
  hass_entity_single_press_share_state:           no.ne
  hass_entity_double_press_share_state:           no.ne
  hass_entity_triple_press_share_state:           no.ne
  hass_entity_hold_share_state:                   no.ne
  hass_entity_release_without_hold_share_state:   no.ne

  hass_entity_single_press_toggle:           no.ne
  hass_entity_double_press_toggle:           no.ne
  hass_entity_triple_press_toggle:           no.ne
  hass_entity_hold_toggle:                   no.ne
  hass_entity_release_without_hold_toggle:   no.ne

  # substitutions to sync lights with hass entities instead of UI switch
  hass_entity_control_light:           no.ne
  hass_entity_control_light_on_state:  'on'
  hass_entity_control_light_off_state: 'off'


# https://esphome.io/components/esp8266.html
esp8266:
  board: esp01_1m
  restore_from_flash: true
  early_pin_init: false


# https://esphome.io/guides/automations.html#global-variables
globals:
  - id: global_press_time
    type: int
    restore_value: no
    initial_value: '0'
  - id: global_to_state
    type: bool
    restore_value: no
    initial_value: 'false'


# https://esphome.io/components/esphome.html#adjusting-flash-writes
preferences:
  # setting interval to 5 minutes since this defines writing total daily energy to flash, which will occur
  # every interval length 24/7/365.  Created a specific save script that is executed for things that need
  # to save more quickly.
  flash_write_interval: 5min


# https://esphome.io/components/esphome.html
esphome:
  name: $name
  friendly_name: $friendly_name

  on_boot:
    then:
        # implementing on_boot automation as a script makes it run in parallel
        # with any other on_boot scripts.
      - script.execute: script_set_power_leds
      # set default values for template sensors, otherwise they are unknown.
      - binary_sensor.template.publish:
          id: button_single_press
          state: OFF
      - binary_sensor.template.publish:
          id: button_double_press
          state: OFF
      - binary_sensor.template.publish:
          id: button_triple_press
          state: OFF
      - binary_sensor.template.publish:
          id: button_hold
          state: OFF
      - binary_sensor.template.publish:
          id: button_release_without_hold
          state: OFF


# https://esphome.io/components/external_components.html
external_components:
  - source:
      type: git
      url: https://github.com/KaufHA/common
      ref: v2025.4.16
    refresh: never


# https://esphome.io/components/wifi.html
wifi:

  # **** ENTER WI-FI CREDENTIALS HERE, USING SECRETS.YAML RECOMMENDED ****
  ssid: $sub_wifi_ssid     # !secret wifi_ssid
  password: $sub_wifi_pass # !secret wifi_password

  # using fast_connect as default since it is required for hidden networks.
  fast_connect: true

  ap:
    ap_timeout: $wifi_ap_timeout


# https://esphome.io/components/captive_portal.html
captive_portal:


# https://esphome.io/components/logger.html
logger:


# https://esphome.io/components/api.html
api:
  id: kauf_api


# https://esphome.io/components/ota.html
ota:
  platform: esphome
  on_error:
    - button.press: restart_button

safe_mode:

# https://esphome.io/components/web_server.html
web_server:
  local: false
  disable: $disable_webserver
  js_url: https://kaufha.com/v2/www.js

# https://esphome.io/components/binary_sensor/index.html
binary_sensor:

    # button input toggles relay and thereby power led
    # https://esphome.io/components/binary_sensor/gpio.html
  - platform: gpio
    id: main_button
    name: Button
    pin:
      number: $sub_button_pin
      mode:
        input: true
        pullup: true
      inverted: true

    on_press:
      - lambda: |-
          // store time of press and clear duration sensor
          id(global_press_time) = millis();
          id(sensor_press_duration).publish_state(0);

          // toggle if button is configured to toggle on press
          if (id(select_button).state == "Toggle on Press") {
            id(ui_light).toggle().perform(); }
      - script.execute: $sub_on_press

    on_release:
      - lambda: |-
          // set press duration sensor
          id(sensor_press_duration).publish_state(millis() - id(global_press_time));

          // toggle if configured to toggle on release and toggle check script is no longer running
          if (  (id(select_button).state == "Toggle on Release") && !id($sub_toggle_check).is_running() ) {
            id(ui_light).toggle().perform();
          }
      - script.execute: $sub_on_release

    on_multi_click:

      # definition for single press
      - timing:
          - ON for at most $sub_hold_time
          - OFF for at least $sub_double_press_max_gap
        invalid_cooldown: 1500ms
        then:
          - lambda: |-
              id(button_single_press).publish_state(true);
              // toggle if button is configured to toggle on single press
              if (id(select_button).state == "Toggle on Single Press") {
                id(ui_light).toggle().perform(); }
              id(script_hass_share_state_single_press).execute();
              id(script_hass_toggle_single_press).execute();
              id($sub_on_single_press).execute();

      # definition for double press
      - timing:
          - ON for at most $sub_hold_time
          - OFF for at most $sub_double_press_max_gap
          - ON for at least 1ms
        then:
          - lambda: |-
              id(button_double_press).publish_state(true);
              // toggle if button is configured to toggle on double press
              if (id(select_button).state == "Toggle on Double Press") {
                id(ui_light).toggle().perform(); }
              id(script_hass_share_state_double_press).execute();
              id(script_hass_toggle_double_press).execute();
              id($sub_on_double_press).execute();

      # definition for triple press
      - timing:
          - ON for at most $sub_hold_time
          - OFF for at most $sub_double_press_max_gap
          - ON for at most $sub_hold_time
          - OFF for at most $sub_double_press_max_gap
          - ON for at least 1ms
        then:
          - lambda: |-
              id(button_triple_press).publish_state(true);
              // toggle if button is configured to toggle on triple press
              if (id(select_button).state == "Toggle on Triple Press") {
                id(ui_light).toggle().perform(); }
              id(script_hass_share_state_triple_press).execute();
              id(script_hass_toggle_triple_press).execute();
              id($sub_on_triple_press).execute();

      # definition for holding
      - timing:
          - ON for at least $sub_hold_time
        then:
          - lambda: |-
              id(button_hold).publish_state(true);
              // toggle if button is configured to toggle on hold
              if (id(select_button).state == "Toggle on Hold") {
                id(ui_light).toggle().perform(); }
              id(script_hass_share_state_hold).execute();
              id(script_hass_toggle_hold).execute();
              id($sub_on_hold).execute();

      # definition for release without hold
      - timing:
          - ON for at most $sub_hold_time
        then:
          - lambda: |-
              id(button_release_without_hold).publish_state(true);
              // toggle if button is configured to toggle on release without hold
              if (id(select_button).state == "Toggle on Release Without Hold") {
                id(ui_light).toggle().perform(); }
              id(script_hass_share_state_release_without_hold).execute();
              id(script_hass_toggle_release_without_hold).execute();
              id($sub_on_release_without_hold).execute();

      # definition for 30s hold to clear credentials
      - timing:
          - ON for at least 30s
        then:
          - script.execute: $sub_wifi_reset_script

  - platform: template
    name: Single Press
    id: button_single_press
    on_press:
      - delay: $sub_button_sensor_duration
      - binary_sensor.template.publish:
          id: button_single_press
          state: OFF

  - platform: template
    name: Double Press
    id: button_double_press
    on_press:
      - delay: $sub_button_sensor_duration
      - binary_sensor.template.publish:
          id: button_double_press
          state: OFF
  
  - platform: template
    name: Triple Press
    id: button_triple_press
    on_press: 
      - delay: $sub_button_sensor_duration
      - binary_sensor.template.publish:
          id: button_triple_press
          state: OFF

  - platform: template
    name: Hold
    id: button_hold
    on_press:
      - wait_until:
          binary_sensor.is_off: main_button
      - binary_sensor.template.publish:
          id: button_hold
          state: OFF

  - platform: template
    name: Release Without Hold
    id: button_release_without_hold
    on_press:
      - delay: $sub_button_sensor_duration
      - binary_sensor.template.publish:
          id: button_release_without_hold
          state: OFF

# https://esphome.io/components/switch/index.html
switch:
    # relay output
    # https://esphome.io/components/switch/gpio.html
  - platform: gpio
    id: relay
    name: "Relay"
    disabled_by_default: $disable_entities
    pin: $sub_relay_pin
    entity_category: ''
    forced_hash: 41191675
    restore_mode: $sub_restore_mode
    on_turn_on:
        - script.execute: script_set_power_leds
        - script.execute: $sub_on_turn_on
    on_turn_off:
        - script.execute: script_set_power_leds
        - script.execute: $sub_on_turn_off

    # https://esphome.io/components/switch/template.html
  - platform: template
    id: led
    name: LED
    optimistic: true
    entity_category: config
    disabled_by_default: $disable_entities
    icon: mdi:led-outline
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - lambda: id(led_pwm).set_level(id(led_brightness).state/100);
    on_turn_off:
      - lambda: id(led_pwm).set_level(0.0);
    forced_hash: 261191305


# https://esphome.io/components/select/index.html
# https://esphome.io/components/select/template.html
select:
  - platform: template
    name: Relay Config
    id: select_relay
    optimistic: true
    options:
      - Switched
      - Always On
      - Always Off
    initial_option: Switched
    restore_value: true
    entity_category: config
    icon: mdi:progress-question
    forced_hash: 3803457832

    on_value:
      then:
        - lambda: |-
            if      ( x == "Always On"  )                   { id(relay).turn_on();  }
            else if ( x == "Always Off" )                   { id(relay).turn_off(); }
            else if ( id(ui_light).current_values.is_on() ) { id(relay).turn_on();  }
            else      /* ui_light off */                    { id(relay).turn_off(); }
        - script.execute: script_save_changes

  - platform: template
    name: Button Config
    id: select_button
    optimistic: true
    options:
      - Toggle on Press
      - Toggle on Release
      - Toggle on Single Press
      - Toggle on Double Press
      - Toggle on Triple Press
      - Toggle on Hold
      - Toggle on Release Without Hold
      - Don't Toggle
    initial_option: $default_button_config
    restore_value: true
    icon: mdi:toggle-switch-off-outline
    entity_category: config
    forced_hash: 3616613943
    set_action:
      - script.execute: script_save_changes

  - platform: template
    name: LED Config
    id: select_led
    optimistic: true
    entity_category: config
    options:
      - Power Status
      - No Automation
      - Invert Power Status
      - Error Status
      - Error and Power
      - Error and Invert Power
    initial_option: Power Status
    restore_value: true
    icon: mdi:led-on
    forced_hash: 3104663617
    set_action:
      - script.execute: script_save_changes
    on_value:
      - if:
          condition:
            - lambda: return ( x == "Error Status" );
          then:
            - switch.turn_off: led
      - script.execute: script_set_power_leds

  - platform: template
    name: Boot State
    id: select_boot_state
    optimistic: true
    options:
      - "Restore Power Off State"
      - "Invert Power Off State"
      - "Always On"
      - "Always Off"
      - "YAML Configured ($sub_restore_mode)"
    initial_option: "Restore Power Off State"
    restore_value: true
    icon: mdi:restart-alert
    entity_category: config
    forced_hash: 2390278151
    on_value:
      - lambda: |-
          if ( x == "Restore Power Off State")
            relay->set_restore_mode(SWITCH_RESTORE_DEFAULT_OFF);
          else if ( x == "Invert Power Off State")
            relay->set_restore_mode(SWITCH_RESTORE_INVERTED_DEFAULT_OFF);
          else if ( x == "Always On")
            relay->set_restore_mode(SWITCH_ALWAYS_ON);
          else if ( x == "Always Off")
            relay->set_restore_mode(SWITCH_ALWAYS_OFF);
          else
            relay->set_restore_mode(SWITCH_$sub_restore_mode);

          // republish state so it gets saved if necessary
          // but make sure relay already set up, don't want to publish here on boot
          if ( id(relay).is_setup() ) id(relay).publish_state(id(relay).state, true);

      - script.execute: script_save_changes


light:
  - platform: binary
    id: ui_light
    name: None
    output: relay_output
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - lambda: |-
            id(global_to_state) = true;
            // Custom logic is now handled via the on_turn_on callback
            // rather than controlling the relay directly
        - script.execute: script_save_changes
        - script.execute: $sub_on_turn_on
    
    on_turn_off:
      then:
        - lambda: |-
            id(global_to_state) = false;
            // Custom logic is now handled via the on_turn_off callback
            // rather than controlling the relay directly
        - script.execute: script_save_changes
        - script.execute: $sub_on_turn_off


# https://esphome.io/components/output/esp8266_pwm.html
output:
  # https://esphome.io/components/output/template.html
  # output to make the light into an actual light entity
  - platform: template
    id: relay_output
    type: binary
    write_action: 
      - lambda: |-
          // This is called when the light component wants to change the output state
          if (state) {  // When turning ON
            // Waiting for select entity to have a state keeps the relay from toggling during boot.
            // Probably not needed after template switch priority was lowered, but keeping the check
            // in case they do the same for template selects later.
            if (id(select_relay).has_state() && (id(select_relay).state != "Always Off")) {
              id(relay).turn_on();
            }
          } else {  // When turning OFF
            if (id(select_relay).has_state() && (id(select_relay).state != "Always On")) {
              id(relay).turn_off();
            }
          }

# pwm outputs for LEDs so they can be dimmed
  - platform: esp8266_pwm
    id: led_pwm
    frequency: 200 Hz
    pin: $sub_led_pin
    inverted: true


# https://esphome.io/guides/automations.html#script-component
script:

    # sets LEDs to proper state based on LED configuration and relay state
  - id: script_set_power_leds
    then:
      - lambda: |-
          // if led follows power status
          if ( (id(select_led).state == "Power Status") || (id(select_led).state == "Error and Power") ) {
            id(led).publish_state(id(relay).state); }

          // if led follows inverse of power status
          else if ( (id(select_led).state == "Invert Power Status") || (id(select_led).state == "Error and Invert Power") ) {
            id(led).publish_state(!id(relay).state); }

      - script.execute: script_save_changes

  - id: blink_status_led
    mode: queued
    then:

      - lambda: |-
          // turn on LED if configured for error status
          if ( (id(select_led).state == "Error Status")  ||
               (id(select_led).state == "Error and Power") ||
               (id(select_led).state == "Error and Invert Power") ) {
            id(led).turn_on(); }
      - delay: 350ms

      - lambda: |-
          // turn off LED if configured for error status
          if ( (id(select_led).state == "Error Status")  ||
               (id(select_led).state == "Error and Power") ||
               (id(select_led).state == "Error and Invert Power") ) {
            id(led).turn_off(); }
      - delay: 1150ms

      - if:
          condition:
            - lambda: return ( ( (App.get_app_state() & STATUS_LED_ERROR) != 0u) || ((App.get_app_state() & STATUS_LED_WARNING) != 0u) );
          then:
            - script.execute: blink_status_led # repeat as long as error/warning exists
          else:
            - script.execute: script_set_power_leds # done with status LED, restore light power status
  - id: script_wifi_reset
    then:
      - logger.log: "------------------->>>>>>>>>>>>>>>>>   HELD BUTTON 30 SECONDS, FORCING AP"

      # overwrite software defined credentials to force ap to turn on.
      - lambda: wifi::global_wifi_component->save_wifi_sta("initial_ap","asdfasdfasdfasdf");

      # blink LED for 10s then restart to get captive portal to turn on.
      - script.execute: blink_led
      - delay: 10s
      - button.press: restart_button

    # blink LED forever.  Used when button is held to re-enable AP.  Stops blinking because plug restarts.
  - id: blink_led
    mode: queued
    then:
      - switch.toggle: led
      - delay: 333ms
      - script.execute: blink_led

  - id: script_do_nothing
    then:
      - lambda: return;

  - id: script_save_changes
    mode: restart
    then:
      - delay: 3s
      - lambda: global_preferences->sync();

  - id: script_hass_share_state_single_press
    then:
      if:
        condition:    # toggle if single press hass entity is set
          lambda: return (strcmp("$hass_entity_single_press_share_state","no.ne") != 0 );
        then:
          - if:
              condition:
                - lambda: 'return id(global_to_state);'
              then:
                - homeassistant.service:
                    service: homeassistant.turn_on
                    data:
                      entity_id: $hass_entity_single_press_share_state
              else:
                - homeassistant.service:
                    service: homeassistant.turn_off
                    data:
                      entity_id: $hass_entity_single_press_share_state

  - id: script_hass_share_state_double_press
    then:
      if:
        condition:    # toggle if double press hass entity is set
          lambda: return (strcmp("$hass_entity_double_press_share_state","no.ne") != 0 );
        then:
          - if:
              condition:
                - lambda: 'return id(global_to_state);'
              then:
                - homeassistant.service:
                    service: homeassistant.turn_on
                    data:
                      entity_id: $hass_entity_double_press_share_state
              else:
                - homeassistant.service:
                    service: homeassistant.turn_off
                    data:
                      entity_id: $hass_entity_double_press_share_state

  - id: script_hass_share_state_triple_press
    then:
      if:
        condition:    # toggle if triple press hass entity is set
          lambda: return (strcmp("$hass_entity_triple_press_share_state","no.ne") != 0 );
        then:
          - if:
              condition:
                - lambda: 'return id(global_to_state);'
              then:
                - homeassistant.service:
                    service: homeassistant.turn_on
                    data:
                      entity_id: $hass_entity_triple_press_share_state
              else:
                - homeassistant.service:
                    service: homeassistant.turn_off
                    data:
                      entity_id: $hass_entity_triple_press_share_state

  - id: script_hass_share_state_hold
    then:
      if:
        condition:    # toggle if hold hass entity is set
          lambda: return (strcmp("$hass_entity_hold_share_state","no.ne") != 0 );
        then:
          - if:
              condition:
                - lambda: 'return id(global_to_state);'
              then:
                - homeassistant.service:
                    service: homeassistant.turn_on
                    data:
                      entity_id: $hass_entity_hold_share_state
              else:
                - homeassistant.service:
                    service: homeassistant.turn_off
                    data:
                      entity_id: $hass_entity_hold_share_state

  - id: script_hass_share_state_release_without_hold
    then:
      if:
        condition:    # toggle if release without hold hass entity is set
          lambda: return (strcmp("$hass_entity_release_without_hold_share_state","no.ne") != 0 );
        then:
          - if:
              condition:
                - lambda: 'return id(global_to_state);'
              then:
                - homeassistant.service:
                    service: homeassistant.turn_on
                    data:
                      entity_id: $hass_entity_release_without_hold_share_state
              else:
                - homeassistant.service:
                    service: homeassistant.turn_off
                    data:
                      entity_id: $hass_entity_release_without_hold_share_state


  - id: script_hass_toggle_single_press
    then:
      if:
        condition:    # toggle if single press hass entity is set
          lambda: return (strcmp("$hass_entity_single_press_toggle","no.ne") != 0 );
        then:
          homeassistant.service:
            service: homeassistant.toggle
            data:
              entity_id: $hass_entity_single_press_toggle

  - id: script_hass_toggle_double_press
    then:
      if:
        condition:    # toggle if double press hass entity is set
          lambda: return (strcmp("$hass_entity_double_press_toggle","no.ne") != 0 );
        then:
          - homeassistant.service:
              service: homeassistant.toggle
              data:
                entity_id: $hass_entity_double_press_toggle

  - id: script_hass_toggle_triple_press
    then:
      if:
        condition:    # toggle if triple press hass entity is set
          lambda: return (strcmp("$hass_entity_triple_press_toggle","no.ne") != 0 );
        then:
          - homeassistant.service:
              service: homeassistant.toggle
              data:
                entity_id: $hass_entity_triple_press_toggle

  - id: script_hass_toggle_hold
    then:
      if:
        condition:    # toggle if hold hass entity is set
          lambda: return (strcmp("$hass_entity_hold_toggle","no.ne") != 0 );
        then:
          homeassistant.service:
            service: homeassistant.toggle
            data:
              entity_id: $hass_entity_hold_toggle

  - id: script_hass_toggle_release_without_hold
    then:
      if:
        condition:    # toggle if release without hold hass entity is set
          lambda: return (strcmp("$hass_entity_release_without_hold_toggle","no.ne") != 0 );
        then:
          homeassistant.service:
            service: homeassistant.toggle
            data:
              entity_id: $hass_entity_release_without_hold_toggle



# https://esphome.io/components/button/index.html
button:

    # https://esphome.io/components/button/restart.html
  - platform: restart
    id: restart_button
    name: Restart Firmware
    entity_category: diagnostic
    disabled_by_default: $disable_entities


# https://esphome.io/components/sensor/index.html
sensor:
    # https://esphome.io/components/sensor/uptime.html
  - platform: uptime
    name: Uptime
    update_interval: 60s
    entity_category: diagnostic
    disabled_by_default: $disable_entities

    # https://esphome.io/components/sensor/template.html
  - platform: template
    name: Button Press Duration
    id: sensor_press_duration
    entity_category: diagnostic
    disabled_by_default: $disable_entities
    unit_of_measurement: ms
    icon: mdi:timer-outline


# https://esphome.io/components/number/index.html
# https://esphome.io/components/number/template.html
number:
  - platform: template
    name: LED Brightness
    min_value: 1
    max_value: 100
    step: 1
    initial_value: 75
    id: led_brightness
    entity_category: config
    optimistic: true
    restore_value: true
    unit_of_measurement: "%"
    mode: slider
    icon: mdi:brightness-percent
    set_action:
      - script.execute: script_save_changes
    on_value:
      - lambda: if ( id(led).state ) id(led_pwm).set_level(x/100);
    forced_hash: 4192312897


# Send IP Address to HA
# https://esphome.io/components/text_sensor/wifi_info.html
text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
      disabled_by_default: $disable_entities


# emulate status_led
# https://esphome.io/guides/automations.html#interval-component
interval:
  - interval: 5s
    then:
    - lambda: |-
        if ( ( ((App.get_app_state() & STATUS_LED_ERROR  ) != 0u) ||
               ((App.get_app_state() & STATUS_LED_WARNING) != 0u) )
            && !id(blink_status_led).is_running() )
          id(blink_status_led).execute();
